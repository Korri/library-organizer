# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slop` gem.
# Please instead update this file by running `bin/tapioca gem slop`.

module Slop
  class << self
    # Example:
    #
    #   Slop.option_defined?(:string) #=> true
    #   Slop.option_defined?(:omg)    #=> false
    #
    # Returns true if an option is defined.
    #
    # @return [Boolean]
    #
    # source://slop//lib/slop.rb#32
    def option_defined?(name); end

    # Parse an array of options (defaults to ARGV). Accepts an
    # optional hash of configuration options and block.
    #
    # Example:
    #
    #   opts = Slop.parse(["-host", "localhost"]) do |o|
    #     o.string '-host', 'a hostname', default: '0.0.0.0'
    #   end
    #   opts.to_hash #=> { host: 'localhost' }
    #
    # Returns a Slop::Result.
    #
    # source://slop//lib/slop.rb#22
    def parse(items = T.unsafe(nil), **config, &block); end

    # Example:
    #
    #   Slop.string_to_option("string")     #=> "StringOption"
    #   Slop.string_to_option("some_thing") #=> "SomeThingOption"
    #
    # Returns a camel-cased class looking string with Option suffix.
    #
    # source://slop//lib/slop.rb#46
    def string_to_option(s); end

    # Example:
    #
    #   Slop.string_to_option_class("string") #=> Slop::StringOption
    #   Slop.string_to_option_class("foo")    #=> uninitialized constant FooOption
    #
    # Returns the full qualified option class. Uses `#string_to_option`.
    #
    # source://slop//lib/slop.rb#56
    def string_to_option_class(s); end
  end
end

# Collect multiple items into a single Array. Support
# arguments separated by commas or multiple occurences.
class Slop::ArrayOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#73
  def call(value); end

  # source://slop//lib/slop/types.rb#82
  def default_value; end

  # source://slop//lib/slop/types.rb#86
  def delimiter; end

  # source://slop//lib/slop/types.rb#90
  def limit; end
end

# Cast the option argument to true or false.
# Override default_value to default to false instead of nil.
# This option type does not expect an argument. However, the API
# supports value being passed. This is to ensure it can capture
# an explicit false value
class Slop::BoolOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#26
  def call(value); end

  # source://slop//lib/slop/types.rb#43
  def default_value; end

  # @return [Boolean]
  #
  # source://slop//lib/slop/types.rb#47
  def expects_argument?; end

  # Returns the value of attribute explicit_value.
  #
  # source://slop//lib/slop/types.rb#22
  def explicit_value; end

  # Sets the attribute explicit_value
  #
  # @param value the value to set the attribute explicit_value to.
  #
  # source://slop//lib/slop/types.rb#22
  def explicit_value=(_arg0); end

  # @return [Boolean]
  #
  # source://slop//lib/slop/types.rb#39
  def force_false?; end

  # source://slop//lib/slop/types.rb#31
  def value; end
end

# source://slop//lib/slop/types.rb#24
Slop::BoolOption::FALSE_VALUES = T.let(T.unsafe(nil), Array)

# source://slop//lib/slop/types.rb#51
Slop::BooleanOption = Slop::BoolOption

# Base error class.
class Slop::Error < ::StandardError; end

# Cast the option argument to a Float.
class Slop::FloatOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#65
  def call(value); end
end

# source://slop//lib/slop/types.rb#63
Slop::FloatOption::FLOAT_STRING_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://slop//lib/slop/types.rb#59
Slop::IntOption = Slop::IntegerOption

# Cast the option argument to an Integer.
class Slop::IntegerOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#55
  def call(value); end
end

# Raised when an option that expects an argument is
# executed without one. Suppress with the `suppress_errors`
# config option.
class Slop::MissingArgument < ::Slop::Error
  # Get all the flags that matches
  # the option with the missing argument
  #
  # @return [MissingArgument] a new instance of MissingArgument
  #
  # source://slop//lib/slop/error.rb#19
  def initialize(msg, flags); end

  # Returns the value of attribute flags.
  #
  # source://slop//lib/slop/error.rb#15
  def flags; end
end

# Raised when a required option is *not* parsed.
# Suppress with the `suppress_errors` config option.
class Slop::MissingRequiredOption < ::Slop::Error; end

# Raised when calling `call` on Slop::Option (this
# method must be overriden in subclasses)
class Slop::NotImplementedError < ::Slop::Error; end

# An option that discards the return value, inherits from Bool
# since it does not expect an argument.
class Slop::NullOption < ::Slop::BoolOption
  # @return [Boolean]
  #
  # source://slop//lib/slop/types.rb#105
  def null?; end
end

class Slop::Option
  # @return [Option] a new instance of Option
  #
  # source://slop//lib/slop/option.rb#30
  def initialize(flags, desc, **config, &block); end

  # A custom proc that yields the option value when
  # it's executed.
  #
  # source://slop//lib/slop/option.rb#25
  def block; end

  # This method is called immediately when an option is found.
  # Override it in sub-classes.
  #
  # @raise [NotImplementedError]
  #
  # source://slop//lib/slop/option.rb#67
  def call(_value); end

  # A Hash of configuration options.
  #
  # source://slop//lib/slop/option.rb#17
  def config; end

  # An Integer count for the total times this option
  # has been executed.
  #
  # source://slop//lib/slop/option.rb#21
  def count; end

  # Returns the default value for this option (default is nil).
  #
  # source://slop//lib/slop/option.rb#96
  def default_value; end

  # A custom description used for the help text.
  #
  # source://slop//lib/slop/option.rb#14
  def desc; end

  # Since `call()` can be used/overriden in subclasses, this
  # method is used to do general tasks like increment count. This
  # ensures you don't *have* to call `super` when overriding `call()`.
  # It's used in the Parser.
  #
  # source://slop//lib/slop/option.rb#49
  def ensure_call(value); end

  # Override this if this option type does not expect an argument
  # (i.e a boolean option type).
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#80
  def expects_argument?; end

  # By default this method does nothing. It's called when all options
  # have been parsed and allows you to mutate the `@value` attribute
  # according to other options.
  #
  # source://slop//lib/slop/option.rb#75
  def finish(_result); end

  # Returns all flags joined by a comma. Used by the help string.
  #
  # source://slop//lib/slop/option.rb#111
  def flag; end

  # An Array of flags this option matches.
  #
  # source://slop//lib/slop/option.rb#11
  def flags; end

  # Returns true if this option should be displayed in help text.
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#128
  def help?; end

  # Returns the last key as a symbol. Used in Options.to_hash.
  #
  # source://slop//lib/slop/option.rb#116
  def key; end

  # Override this if you want to ignore the return value for an option
  # (i.e so Result#to_hash does not include it).
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#86
  def null?; end

  # Returns true if an exception should be raised when this option isn't supplied.
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#106
  def required?; end

  # Reset the option count and value. Used when calling .reset
  # on the Parser.
  #
  # source://slop//lib/slop/option.rb#40
  def reset; end

  # Returns true if we should ignore errors that cause exceptions to be raised.
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#101
  def suppress_errors?; end

  # Returns 1 if this option should be added to the tail of the help text.
  # Used for sorting.
  #
  # source://slop//lib/slop/option.rb#139
  def tail; end

  # Returns true if this option should be added to the tail of the help text.
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#133
  def tail?; end

  # Returns the help text for this option (flags and description).
  #
  # source://slop//lib/slop/option.rb#144
  def to_s(offset: T.unsafe(nil)); end

  # Returns true if this option should be displayed with dashes transformed into underscores.
  #
  # @return [Boolean]
  #
  # source://slop//lib/slop/option.rb#123
  def underscore_flags?; end

  # Returns the value for this option. Falls back to the default (or nil).
  #
  # source://slop//lib/slop/option.rb#91
  def value; end

  # The end value for this option.
  #
  # source://slop//lib/slop/option.rb#28
  def value=(_arg0); end
end

# source://slop//lib/slop/option.rb#3
Slop::Option::DEFAULT_CONFIG = T.let(T.unsafe(nil), Hash)

class Slop::Options
  include ::Enumerable

  # @return [Options] a new instance of Options
  # @yield [_self]
  # @yieldparam _self [Slop::Options] the object that the method was called on
  #
  # source://slop//lib/slop/options.rb#27
  def initialize(**config, &block); end

  # The String banner prefixed to the help string.
  #
  # source://slop//lib/slop/options.rb#25
  def banner; end

  # The String banner prefixed to the help string.
  #
  # source://slop//lib/slop/options.rb#25
  def banner=(_arg0); end

  # A Hash of configuration options.
  #
  # source://slop//lib/slop/options.rb#22
  def config; end

  # Implements the Enumerable interface.
  #
  # source://slop//lib/slop/options.rb#76
  def each(&block); end

  # Handle custom option types. Will fall back to raising an
  # exception if an option is not defined.
  #
  # source://slop//lib/slop/options.rb#82
  def method_missing(name, *args, **config, &block); end

  # Add a new option. This method is an alias for adding a NullOption
  # (i.e an option with an ignored return value).
  #
  # Example:
  #
  #   opts = Slop.parse do |o|
  #     o.on '--version' do
  #       puts Slop::VERSION
  #     end
  #   end
  #
  #   opts.to_hash #=> {}
  #
  # Returns the newly created Option subclass.
  #
  # source://slop//lib/slop/options.rb#51
  def on(*flags, **config, &block); end

  # The Array of Option instances we've created.
  #
  # source://slop//lib/slop/options.rb#13
  def options; end

  # Sugar to avoid `options.parser.parse(x)`.
  #
  # source://slop//lib/slop/options.rb#71
  def parse(strings); end

  # Our Parser instance.
  #
  # source://slop//lib/slop/options.rb#19
  def parser; end

  # Add a separator between options. Used when displaying
  # the help text.
  #
  # source://slop//lib/slop/options.rb#62
  def separator(string = T.unsafe(nil)); end

  # An Array of separators used for the help text.
  #
  # source://slop//lib/slop/options.rb#16
  def separators; end

  # Return a copy of our options Array.
  #
  # source://slop//lib/slop/options.rb#96
  def to_a; end

  # Returns the help text for this options. Used by Result#to_s.
  #
  # source://slop//lib/slop/options.rb#101
  def to_s(prefix: T.unsafe(nil)); end

  private

  # source://slop//lib/slop/options.rb#131
  def add_option(option); end

  # source://slop//lib/slop/options.rb#123
  def longest_flag_length; end

  # source://slop//lib/slop/options.rb#127
  def longest_option; end

  # @return [Boolean]
  #
  # source://slop//lib/slop/options.rb#91
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://slop//lib/slop/options.rb#5
Slop::Options::DEFAULT_CONFIG = T.let(T.unsafe(nil), Hash)

class Slop::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://slop//lib/slop/parser.rb#13
  def initialize(options, **config); end

  # Returns an Array of String arguments that were not parsed.
  #
  # source://slop//lib/slop/parser.rb#11
  def arguments; end

  # A Hash of configuration options.
  #
  # source://slop//lib/slop/parser.rb#8
  def config; end

  # Our Options instance.
  #
  # source://slop//lib/slop/parser.rb#5
  def options; end

  # Traverse `strings` and process options one by one. Anything after
  # `--` is ignored. If a flag includes a equals (=) it will be split
  # so that `flag, argument = s.split('=')`.
  #
  # The `call` method will be executed immediately for each option found.
  # Once all options have been executed, any found options will have
  # the `finish` method called on them.
  #
  # Returns a Slop::Result.
  #
  # source://slop//lib/slop/parser.rb#36
  def parse(strings); end

  # Reset the parser, useful to use the same instance to parse a second
  # time without duplicating state.
  #
  # source://slop//lib/slop/parser.rb#21
  def reset; end

  # Returns an Array of Option instances that were not used.
  #
  # source://slop//lib/slop/parser.rb#102
  def unused_options; end

  # Returns an Array of Option instances that were used.
  #
  # source://slop//lib/slop/parser.rb#97
  def used_options; end

  private

  # @return [Boolean]
  #
  # source://slop//lib/slop/parser.rb#108
  def consume_next_argument?(flag); end

  # source://slop//lib/slop/parser.rb#159
  def matching_option(flag); end

  # source://slop//lib/slop/parser.rb#163
  def partition(strings); end

  # We've found an option, process and return it
  #
  # source://slop//lib/slop/parser.rb#116
  def process(option, arg); end

  # @return [Boolean]
  #
  # source://slop//lib/slop/parser.rb#155
  def suppress_errors?; end

  # Try and find an option to process
  #
  # source://slop//lib/slop/parser.rb#122
  def try_process(flag, arg); end

  # try and process as a set of grouped short flags. drop(1) removes
  # the prefixed -, then we add them back to each flag separately.
  #
  # source://slop//lib/slop/parser.rb#147
  def try_process_grouped_flags(flag, arg); end

  # try and process a flag with a "smashed" argument, e.g.
  # -nFoo or -i5
  #
  # source://slop//lib/slop/parser.rb#138
  def try_process_smashed_arg(flag); end
end

# Cast the option argument to a Regexp.
class Slop::RegexpOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#97
  def call(value); end
end

# This class encapsulates a Parser and Options pair. The idea is that
# the Options class shouldn't have to deal with what happens when options
# are parsed, and the Parser shouldn't have to deal with the state of
# options once parsing is complete. This keeps the API really simple; A
# Parser parses, Options handles options, and this class handles the
# result of those actions. This class contains the important most used
# methods.
class Slop::Result
  # @return [Result] a new instance of Result
  #
  # source://slop//lib/slop/result.rb#12
  def initialize(parser); end

  # Returns an option's value, nil if the option does not exist.
  #
  # source://slop//lib/slop/result.rb#18
  def [](flag); end

  # Set the value for an option. Raises an ArgumentError if the option
  # does not exist.
  #
  # source://slop//lib/slop/result.rb#36
  def []=(flag, value); end

  # Example:
  #
  #   opts = Slop.parse do |o|
  #     o.string '--host'
  #     o.int '-p'
  #   end
  #
  #   # ruby run.rb connect --host 123 helo
  #   opts.arguments #=> ["connect", "helo"]
  #
  # Returns an Array of String arguments that were not parsed.
  #
  # source://slop//lib/slop/result.rb#85
  def args; end

  # Example:
  #
  #   opts = Slop.parse do |o|
  #     o.string '--host'
  #     o.int '-p'
  #   end
  #
  #   # ruby run.rb connect --host 123 helo
  #   opts.arguments #=> ["connect", "helo"]
  #
  # Returns an Array of String arguments that were not parsed.
  #
  # source://slop//lib/slop/result.rb#85
  def arguments; end

  # Returns an option's value, raises UnknownOption if the option does not exist.
  #
  # source://slop//lib/slop/result.rb#24
  def fetch(flag); end

  # Returns an option's value, nil if the option does not exist.
  #
  # source://slop//lib/slop/result.rb#18
  def get(flag); end

  # source://slop//lib/slop/result.rb#52
  def method_missing(name, *args, &block); end

  # Returns an Option if it exists. Ignores any prefixed hyphens.
  #
  # source://slop//lib/slop/result.rb#46
  def option(flag); end

  # Returns the value of attribute options.
  #
  # source://slop//lib/slop/result.rb#10
  def options; end

  # Returns the value of attribute parser.
  #
  # source://slop//lib/slop/result.rb#10
  def parser; end

  # Set the value for an option. Raises an ArgumentError if the option
  # does not exist.
  #
  # source://slop//lib/slop/result.rb#36
  def set(flag, value); end

  # Returns a hash with option key => value.
  #
  # source://slop//lib/slop/result.rb#91
  def to_h; end

  # Returns a hash with option key => value.
  #
  # source://slop//lib/slop/result.rb#91
  def to_hash; end

  # source://slop//lib/slop/result.rb#96
  def to_s(**opts); end

  # Returns an Array of Option instances that were not used.
  #
  # source://slop//lib/slop/result.rb#70
  def unused_options; end

  # Returns an Array of Option instances that were used.
  #
  # source://slop//lib/slop/result.rb#65
  def used_options; end

  private

  # source://slop//lib/slop/result.rb#102
  def clean_key(key); end

  # @return [Boolean]
  #
  # source://slop//lib/slop/result.rb#60
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# Cast the option argument to a String.
class Slop::StringOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#4
  def call(value); end
end

# Cast the option argument to a symbol.
class Slop::SymbolOption < ::Slop::Option
  # source://slop//lib/slop/types.rb#11
  def call(value); end
end

# Raised when an unknown option is parsed or when trying to fetch an
# unexisting option via `Slop::Result#fetch`.
# Suppress with the `suppress_errors` config option.
class Slop::UnknownOption < ::Slop::Error
  # @return [UnknownOption] a new instance of UnknownOption
  #
  # source://slop//lib/slop/error.rb#31
  def initialize(msg, flag); end

  # Returns the value of attribute flag.
  #
  # source://slop//lib/slop/error.rb#29
  def flag; end
end

# source://slop//lib/slop.rb#9
Slop::VERSION = T.let(T.unsafe(nil), String)
